#!/usr/bin/env node

/**
 * Module dependencies
 */

var app = require('../app');
var debug = require('debug')('sketchy:server');
var http = require('http');
let promise = require('bluebird');
let options = {
    promiseLib: promise
}
let pgp = require('pg-promise')(options);
let connectionString = process.env.DATABASE_URL

let db = pgp(connectionString);


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

//some temporary chat variables
const LOBBY = 'lobby-chat';
const LIMIT = 8;
const PLAYERLIST = 'player-list';


const UUID = require('uuid/v4');
let gameRoomList = [];


const socketIO = require('socket.io');
var server = http.createServer(app);
const io = socketIO(server);

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

// socket functionality 

/**socket
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }


  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}
/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

io.on('connection', socket => {
  //before session 
  socket.playerid = ''
  socket.focus = '';
  socket.inGame = false;
  console.log('client connected id : ' + socket.id);


  socket.on('loadLobby', data => {
    console.log(data.username)
    socket.playerid = data.id
    socket.focus = LOBBY;
    socket.join(LOBBY);
    socket.join(socket.playerid);
    for (let i = 0; i < gameRoomList.length; i++) {
      console.log(gameRoomList[i].gameroomname);
      io.to(socket.playerid).emit('newgame', { package: gameRoomList[i], limit: LIMIT, playercount: gameRoomList[i].playerlist.length });
      if (gameRoomList[i].playerlist.length >= LIMIT) {
        io.to(LOBBY).emit("disableRoom", gameRoomList[i].gameroomid)
      }
      return
    };
  });

  socket.on('loadGame', data => {
    socket.focus = data.roomid;
    socket.playerid = data.id
    socket.inGame = true;
    console.log(data.id);
    socket.join(data.roomid);
    socket.join(socket.playerid);
    socket.broadcast.to(socket.focus).emit('resync')
    for (let i = 0; i < gameRoomList.length; i++) {
      if (gameRoomList[i].gameroomid == data.roomid) {
        gameRoomList[i].playerlist.push(socket.playerid)
        gameRoomList[i].hostlist.push(socket.playerid)
        io.to(LOBBY).emit('updateRoomList', { roomid: data.roomid, limit: LIMIT, playercount: gameRoomList[i].playerlist.length })

        if (gameRoomList[i].playerlist.length >= LIMIT) {
          console.log("disabling room ")
          io.to(LOBBY).emit("disableRoom", data.roomid)
        }
        io.to(gameRoomList[i].host).emit('getStatus', socket.playerid)
        break
      }
    }
    startGameWhenReady(socket.focus)
  });

  socket.on('sendStatus', data => {
    io.to(data.to).emit('updateStatus', data.message)
  })

  function startGameWhenReady(roomid) {
    for (let i = 0; i < gameRoomList.length; i++) {
      if (gameRoomList[i].gameroomid == roomid) {
        if (gameRoomList[i].playerlist.length >= 2 && gameRoomList[i].host == null) {
          findNewHost({ roomid: roomid, id: null })
          return
        }
      }
    }
  }

  socket.on('send_updateStatus', data => {
    for (let i = 0; i < gameRoomList.length; i++) {
      if (gameRoomList[i].gameroomid == data.roomid) {
        gameRoomList[i].hostUsername = data.host
        break
      }
    }
    socket.broadcast.to(data.roomid).emit('updateStatus', data.message)
  })

  socket.on('send_updateTimer', data => {
    io.to(data.roomid).emit('updateTimer', data.message)
  })

  socket.on('send_setReadOnly', data => {
    socket.broadcast.to(data.roomid).emit('setReadOnly')
  })

  socket.on('findANewHost', data => {
    findNewHost(data)
  })

    socket.on('getWord', roomid => {
        getWord(roomid)
    })

    function getWord(roomid) {
        db.one('SELECT word FROM public.wordlist ORDER BY random() LIMIT 1')
            .then(function (data) {
                for (let i = 0; i < gameRoomList.length; i++) {
                    if (gameRoomList[i].gameroomid == roomid) {
                        gameRoomList[i].word = data.word
                        io.to(gameRoomList[i].host).emit('setWord', gameRoomList[i].word)
                        return
                    }
                }
            })
    }

  function findNewHost(data) {
    for (let i = 0; i < gameRoomList.length; i++) {
      if (gameRoomList[i].gameroomid == data.roomid) {
        if (gameRoomList[i].hostlist.length == 0) {
          let topscoreindex = -1
          let topscore = 0
          for (let j = 0; j < gameRoomList[i].scorelist.length; j++) {
            if (gameRoomList[i].scorelist[j].score > topscore) {
              topscore = gameRoomList[i].scorelist[j].score
              topscoreindex = j
            }
          }

          if (topscoreindex != -1) {
            let message = "Current lead: <b>" + gameRoomList[i].scorelist[topscoreindex].player + "</b> at " + gameRoomList[i].scorelist[topscoreindex].score + " points!"
            io.to(socket.focus).emit('chat message', { msg: message, servermessage: true })
          }

          for (let j = 0; j < gameRoomList[i].playerlist.length; j++)
            gameRoomList[i].hostlist.push(gameRoomList[i].playerlist[j])
        }
        gameRoomList[i].host = gameRoomList[i].hostlist.shift()
        io.to(data.roomid).emit('youarenothost')
        io.to(gameRoomList[i].host).emit('youarehost')
        return
      }
    }
  }

  socket.on('disconnect', data => {
    console.log('client disconnected');

    console.log("Player id disconnected: " + socket.playerid);
    console.log(socket.focus);
    if (socket.inGame) {
      for (let i = 0; i < gameRoomList.length; i++) {
        if (gameRoomList[i].gameroomid == socket.focus) {
          let index = gameRoomList[i].playerlist.indexOf(socket.playerid)
          let hostToDelete = gameRoomList[i].hostlist.indexOf(socket.playerid)
          gameRoomList[i].playerlist.splice(index, 1)
          gameRoomList[i].hostlist.splice(hostToDelete, 1)
          io.to(LOBBY).emit('updateRoomList', { roomid: socket.focus, limit: LIMIT, playercount: gameRoomList[i].playerlist.length })

          if (gameRoomList[i].host == socket.playerid) {
            gameRoomList[i].host = null
            startGameWhenReady(socket.focus)
          }

          if (gameRoomList[i].playerlist.length < LIMIT && gameRoomList[i].playerlist.length >= 1) {
            io.to(LOBBY).emit('enableRoom', socket.focus)
          }
          if (gameRoomList[i].playerlist.length == 1) {
            gameRoomList[i].host = null
            io.to(socket.focus).emit('endgame')
          }
          if (gameRoomList[i].playerlist.length < 1) {
            gameRoomList.splice(i, 1);
            io.to(LOBBY).emit('deleteRoom', socket.focus)
          }
          return
        }
      }
    }
  })

  socket.on('chat message', data => {
    // console.log('message: ' + msg);
    // console.log('focus: ' + focus);
    const username = data.player
    // http://stackoverflow.com/questions/822452/strip-html-from-text-javascript
    const chatMessage = data.message.replace(/<(?:.|\n)*?>/gm, '')
    let scoreindex = 0
    let hostindex = 0
    let message = ' '

    if (socket.inGame) {
      for (let i = 0; i < gameRoomList.length; i++) {
        if (gameRoomList[i].gameroomid == socket.focus) {
          for (let j = 0; j < gameRoomList[i].scorelist.length; j++) {
            if (gameRoomList[i].scorelist[j].player == username) {
              scoreindex = j
            }
            if (gameRoomList[i].scorelist[j].player == gameRoomList[i].hostUsername) {
              hostindex = j
            }
          }

          if (scoreindex == 0) {
            let temppackage = { player: username, score: 0 }
            gameRoomList[i].scorelist.push(temppackage)
            scoreindex = gameRoomList[i].scorelist.length - 1
          }
          if (hostindex == 0) {
            let temppackage = { player: gameRoomList[i].hostUsername, score: 0 }
            gameRoomList[i].scorelist.push(temppackage)
            hostindex = gameRoomList[i].scorelist.length - 1
          }
          message = "<b>" + username + "( " + gameRoomList[i].scorelist[scoreindex].score + " )</b>: " + data.message;
          io.to(socket.focus).emit('chat message', { msg: message, servermessage: false })

          if (chatMessage.toLowerCase().includes(gameRoomList[i].word) && gameRoomList[i].host != data.playerid) {
            gameRoomList[i].scorelist[scoreindex].score++
            gameRoomList[i].scorelist[hostindex].score++
            message = "<b>" + username + "( " + gameRoomList[i].scorelist[scoreindex].score + " ) </b> guessed the word: <b><i>" + gameRoomList[i].word + "</i></b>"
            io.to(socket.focus).emit('chat message', { msg: message, servermessage: true })
            getWord(socket.focus)
          }
          break
        }
      }
    } else {
      message = "<b>" + username + "</b>" + ": " + data.message
      io.to(socket.focus).emit('chat message', { msg: message, servermessage: false })
    }
  })

  socket.on('createroom', roomname => {
    const roomid = UUID();
    const package = {
      gameroomid: roomid,
      gameroomname: roomname,
      playerlist: [],
      hostlist: [],
      scorelist: [{ player: "", score: 0 }],
      host: null,
      hostUsername: null,
      word: null
    }
    gameRoomList.push(package);

    io.to(LOBBY).emit('newgame', { package: package, limit: LIMIT, playercount: 1 });
    io.to(socket.playerid).emit('enterRoom', roomid);
  });

  socket.on('private-chat', room => {
    socket.focus = room;
    console.log(socket.playerid + ' is joinning room: ' + room);
  });

  socket.on('returnToLobby', event => {
    socket.focus = LOBBY;
    console.log(socket.playerid + ' has returned to lobby ');
  });
  //artpad socket.io functions
  socket.on('mirror-payload', (msg) => {
    socket.broadcast.to(socket.focus).emit('mirror-package', msg)
  });
});

//From Mozilla Docs
function getRandomInt(min, max) {
  min = Math.ceil(min)
  max = Math.floor(max)
  return Math.floor(Math.random() * (max - min)) + min

}