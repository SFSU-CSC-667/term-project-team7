#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('sketchy:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

//some temporary chat variables
const LOBBY = 'lobby-chat';
const PLAYERLIST = 'player-list';


const UUID = require ('uuid/v4');
let gameRoomList  = [];


const socketIO = require('socket.io');
var server = http.createServer(app);
const io = socketIO(server);

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

// socket functionality 

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }
  

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}
/**
 * Event listener for HTTP server "listening" event.
 */
http://localhost:3000/chat
function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

io.on('connection', socket => {
    //before session 
    let focus = '';  
    let inGame = false;
    console.log( 'client connected id : '  + socket.id);
    socket.join(socket.id);
    
    socket.on('loadLobby' , data => {
      focus = LOBBY ;
      socket.join(LOBBY);
      for(let i = 0; i < gameRoomList.length; i++){
        console.log(gameRoomList[i].gameroomname);
        io.to(socket.id).emit('newgame' , gameRoomList[i] );
      };
    });
  
    socket.on('loadGame' , roomid => {
          focus = roomid;
          inGame = true;
          console.log(roomid);
          socket.join(roomid);
          socket.broadcast.to(focus).emit('resync')
    });
              
  //  }
    socket.on( 'disconnect', data => {
      console.log( 'client disconnected' );
      
      if( inGame) {
        for(let i = 0; i < gameRoomList.length; i++){
          if(gameRoomList[i].gameroomid == focus ) {
              let index = gameRoomList[i].playerlist.indexOf(focus)
              if (index != -1){
                gameRoomList[i].playerlist.splice(index, 1 );
              }
            }
          };
        
      }
    }) 
    
    socket.on('joinRoom', roomid => {
      for(let i = 0; i < gameRoomList.length; i++){
        if(gameRoomList[i].gameroomid == roomid ) {
          gameRoomList[i].playerlist.push(socket.id);
        }
      }
    });
  
    socket.on('chat message', msg =>{
         console.log('message: ' + msg);
      if (focus == LOBBY){
         io.to(focus).emit('chat message', msg);
      } else {
          io.to(focus).emit('chat message', msg);
      }
    });
    
    socket.on('createroom', roomname => {
        const roomid = UUID(); 
        const package = {
           gameroomid : roomid , 
           gameroomname : roomname ,
           playerlist : []
        }
        package.playerlist.push(socket.id);
        gameRoomList.push(package); 
        io.to(LOBBY).emit('newgame' , package );
        io.to(socket.id).emit('enterRoom' , roomid) ;
    });
  
    socket.on ( 'private-chat', room =>  {
      focus = room;
      console.log(socket.id +' is joinning room: ' + room) ; 
    });
    
    socket.on( 'returnToLobby', event => {
      focus = LOBBY;
      console.log( socket.id + ' has returned to lobby ' );
    });
    //artpad socket.io functions
    socket.on('mirror-payload', (msg) => {
      socket.broadcast.to(focus).emit('mirror-package', msg)
    });
});

function initializeSocket (socket) {
  
  /*initialize socket info
  
    socketid
    name 
    focus 
    isInitialized
    isActive
    ...
    
    */
}


