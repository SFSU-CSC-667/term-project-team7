#!/usr/bin/env node

/**
 * Module dependencies
 */

var app = require('../app');
var debug = require('debug')('sketchy:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

//some temporary chat variables
const LOBBY = 'lobby-chat';
const LIMIT = 10;
const PLAYERLIST = 'player-list';


const UUID = require('uuid/v4');
let gameRoomList = [];


const socketIO = require('socket.io');
var server = http.createServer(app);
const io = socketIO(server);

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

// socket functionality 

/**socket
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }


  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}
/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

io.on('connection', socket => {
  //before session 
  let playerid = ''
  let focus = '';
  let inGame = false;
  console.log('client connected id : ' + socket.id);


  socket.on('loadLobby', data => {
    console.log(data.username)
    playerid = data.id
    focus = LOBBY;
    socket.join(LOBBY);
    socket.join(playerid);
    for (let i = 0; i < gameRoomList.length; i++) {
      console.log(gameRoomList[i].gameroomname);
      io.to(playerid).emit('newgame', {package : gameRoomList[i], limit : LIMIT, playercount : gameRoomList[i].playerlist.length});
      if (gameRoomList[i].playerlist.length >= LIMIT) {
       io.to(LOBBY).emit("disableRoom", gameRoomList[i].gameroomid)
      }
      return
    };
  });

  socket.on('loadGame', data => {
    focus = data.roomid;
    playerid = data.id
    inGame = true;
    console.log(data.id);
    socket.join(data.roomid);
    socket.join(playerid);
    socket.broadcast.to(focus).emit('resync')
    for (let i = 0; i < gameRoomList.length; i++) {
      if (gameRoomList[i].gameroomid == data.roomid) {
        gameRoomList[i].playerlist.push(playerid)
        io.to(LOBBY).emit('updateRoomList', {roomid : data.roomid, limit : LIMIT, playercount : gameRoomList[i].playerlist.length})

        if (gameRoomList[i].playerlist.length >= LIMIT) {
          console.log("disabling room ")
          io.to(LOBBY).emit("disableRoom", data.roomid)
        }
        io.to(gameRoomList[i].host).emit('getStatus', playerid)
        break
      }
    }
    startGameWhenReady(focus)
  });

  socket.on('sendStatus', data => {
    io.to(data.to).emit('updateStatus', data.message)
  })

  function startGameWhenReady(roomid) {
    for (let i = 0; i < gameRoomList.length; i++) {
      if (gameRoomList[i].gameroomid == roomid) {
        if (gameRoomList[i].playerlist.length >= 2 && gameRoomList[i].host == null) {
          findNewHost({ roomid: roomid, id: null })
          return
        }
      }
    }
  }

  socket.on('send_updateStatus', data => {
    for (let i = 0; i < gameRoomList.length; i++) {
      if (gameRoomList[i].gameroomid == data.roomid) {
        gameRoomList[i].hostUsername = data.host
        break
      }
    }
    socket.broadcast.to(data.roomid).emit('updateStatus', data.message)
  })

  socket.on('send_updateTimer', data => {
    io.to(data.roomid).emit('updateTimer', data.message)
  })

  socket.on('send_setReadOnly', data => {
    socket.broadcast.to(data.roomid).emit('setReadOnly')
  })

  socket.on('findANewHost', data => {
    findNewHost(data)
  })

  socket.on('getWord', roomid => {
    getWord(roomid)
  })

  function getWord(roomid) {
    for (let i = 0; i < gameRoomList.length; i++) {
      if (gameRoomList[i].gameroomid == roomid) {
        gameRoomList[i].word = wordlist[getRandomInt(0, wordlist.length)]
        io.to(gameRoomList[i].host).emit('setWord', gameRoomList[i].word)
        return
      }
    }
  }

  function findNewHost(data) {
    temp_playerlist = []
    for (let i = 0; i < gameRoomList.length; i++) {
      if (gameRoomList[i].gameroomid == data.roomid) {
        for (let j = 0; j < gameRoomList[i].playerlist.length; j++) {
          if (gameRoomList[i].playerlist[j] != gameRoomList[i].host) {
            temp_playerlist.push(gameRoomList[i].playerlist[j])
          }
        }
        gameRoomList[i].host = temp_playerlist[getRandomInt(0, temp_playerlist.length)]
        io.to(data.roomid).emit('youarenothost')
        io.to(gameRoomList[i].host).emit('youarehost')
        return
      }
    }
  }

  socket.on('disconnect', data => {
    console.log('client disconnected');

    console.log("Player id disconnected: " + playerid);
    console.log(focus);
    if (inGame) {
      for (let i = 0; i < gameRoomList.length; i++) {
        if (gameRoomList[i].gameroomid == focus) {
          let index = gameRoomList[i].playerlist.indexOf(playerid)
          gameRoomList[i].playerlist.splice(index, 1);
          io.to(LOBBY).emit('updateRoomList', {roomid : focus, limit : LIMIT, playercount : gameRoomList[i].playerlist.length})

          if (gameRoomList[i].host == playerid) {
            gameRoomList[i].host = null
            startGameWhenReady(focus)
          }

          if (gameRoomList[i].playerlist.length < LIMIT && gameRoomList[i].playerlist.length >= 1) {
              io.to(LOBBY).emit('enableRoom', focus)
          }
          if (gameRoomList[i].playerlist.length == 1) {
            gameRoomList[i].host = null
            io.to(focus).emit('endgame')
          }
          if (gameRoomList[i].playerlist.length < 1) {
            gameRoomList.splice(i, 1);
            io.to(LOBBY).emit('deleteRoom', focus)
          }
          return
        }
      }
    }
  })

  socket.on('chat message', data => {
    // console.log('message: ' + msg);
    // console.log('focus: ' + focus);
    const username = data.player
    const chatMessage = data.message.replace(/<(?:.|\n)*?>/gm, '');
    let scoreindex = 0
    let hostindex = 0
    let message = ' '

    if (inGame) {
      for (let i = 0; i < gameRoomList.length; i++) {
        if (gameRoomList[i].gameroomid == focus) {
          for (let j = 0; j < gameRoomList[i].scorelist.length; j++) {
            if (gameRoomList[i].scorelist[j].player == username) {
              scoreindex = j
            }
            if (gameRoomList[i].scorelist[j].player == gameRoomList[i].hostUsername) {
              hostindex = j
            }
          }

          if (scoreindex == 0) {
            let temppackage = { player: username, score: 0 }
            gameRoomList[i].scorelist.push(temppackage)
            scoreindex = gameRoomList[i].scorelist.length - 1
          }
          if (hostindex == 0) {
            let temppackage = { player: gameRoomList[i].hostUsername, score: 0 }
            gameRoomList[i].scorelist.push(temppackage)
            hostindex = gameRoomList[i].scorelist.length - 1
          }
        message = username + "( " + gameRoomList[i].scorelist[scoreindex].score + " ): " + data.message;
        io.to(focus).emit('chat message', {msg : message, servermessage : false} )
      
          if (chatMessage.toLowerCase().includes(gameRoomList[i].word) && gameRoomList[i].host != data.playerid) {
            gameRoomList[i].scorelist[scoreindex].score++
            gameRoomList[i].scorelist[hostindex].score++
          message = username + "( " + gameRoomList[i].scorelist[scoreindex].score + " ) guessed the word: " + gameRoomList[i].word
          io.to(focus).emit('chat message',  {msg : message, servermessage : true})
            getWord(focus)
          }
          break
        }
      }
    } else {
          message =  username + ": " + data.message
    io.to(focus).emit('chat message',{msg : message, servermessage : false})
    }
  })

  socket.on('createroom', roomname => {
    const roomid = UUID();
    const package = {
      gameroomid: roomid,
      gameroomname: roomname,
      playerlist: [],
      scorelist: [{ player: "", score: 0 }],
      host: null,
      hostUsername: null,
      word: null
    }
    gameRoomList.push(package);

    io.to(LOBBY).emit('newgame',{ package : package, limit : LIMIT, playercount : 1});
    io.to(playerid).emit('enterRoom', roomid);
  });

  socket.on('private-chat', room => {
    focus = room;
    console.log(playerid + ' is joinning room: ' + room);
  });

  socket.on('returnToLobby', event => {
    focus = LOBBY;
    console.log(playerid + ' has returned to lobby ');
  });
  //artpad socket.io functions
  socket.on('mirror-payload', (msg) => {
    socket.broadcast.to(focus).emit('mirror-package', msg)
  });
});

//From Mozilla Docs
function getRandomInt(min, max) {
  min = Math.ceil(min)
  max = Math.floor(max)
  return Math.floor(Math.random() * (max - min)) + min
}

//Temp list
wordlist = ["cat", "sun", "cup", "ghost", "flower", "pie", "cow",
  "banana", "snowflake", "bug", "book", "jar", "snake", "light", "tree", "lips", "apple",
  "slide", "socks", "smile", "swing", "coat", "shoe", "water", "heart", "hat", "ocean",
  "kite", "dog", "mouth", "milk", "duck", "eyes", "skateboard", "bird", "boy", "apple",
  "person", "girl", "mouse", "ball", "house", "star", "nose", "bed", "whale", "jacket",
  "shirt", "hippo", "beach", "egg", "face", "cookie", "cheese", "drum", "circle", "spoon",
  "worm", "bridge", "bone", "grapes", "bell", "jellyfish", "bunny", "truck", "grass",
  "door", "monkey", "spider", "bread", "ears", "bowl", "bracelet", "alligator", "bat",
  "clock", "lollipop", "moon", "doll", "orange", "ear", "basketball", "bike", "airplane",
  "pen", "inchworm", "seashell", "rocket", "cloud", "bear", "corn", "chicken", "purse",
  "glasses", "blocks", "carrot", "turtle", "pencil", "horse", "dinosaur", "head", "lamp",
  "snowman", "ant", "giraffe", "cupcake", "chair", "leaf", "snail", "baby", "balloon", "bus",
  "cherry", "crab", "football", "branch", "robot", "horse", "door", "song", "trip", "backbone",
  "bomb", "round", "treasure", "garbage", "park", "pirate", "ski", "state", "whistle", "palace",
  "baseball", "coal", "queen", "dominoes", "photograph", "computer", "hockey", "aircraft",
  "hotdog", "key", "whisk", "frog", "lawnmower", "mattress", "pinwheel", "cake", "circus",
  "battery", "mailman", "cowboy", "password", "bicycle", "skate", "electricity", "lightsaber",
  "thief", "teapot", "deep", "spring", "nature", "shallow", "toast", "outside", "America",
  "bowtie", "half", "spare", "wax", "platypus", "music", "sailboat", "popsicle", "brain",
  "skirt", "knee", "pineapple", "tusk", "sprinkler", "money", "spool", "lighthouse",
  "doormat", "face", "flute", "rug", "snowball", "purse", "owl", "gate", "suitcase",
  "stomach", "doghouse", "pajamas", "peach", "newspaper", "hook", "school", "beaver",
  "beehive", "beach", "artist", "flagpole", "camera", "mushroom", "toe", "pretzel",
  "tv", "quilt", "chalk", "dollar", "soda", "chin", "swing", "garden", "ticket", "boot",
  "cello", "rain", "clam", "pelican", "stingray", "fur", "blowfish", "rainbow", "happy", "fairy"
]